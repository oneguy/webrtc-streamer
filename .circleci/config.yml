defaults: &defaults
  working_directory: /webrtc-streamer
  docker:
    - image: ubuntu:20.04
    
version: 2.1
jobs:
  # -------------------------------------
  # dowload common tools 
  # -------------------------------------
  setup:
    <<: *defaults
    
    environment:
      WEBRTCROOT: /webrtc 

    steps:     
      - run: apt-get update; DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends ca-certificates wget python autoconf automake libtool git make g++ xz-utils
      - run: git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git /depot_tools
      - run: echo 'export PATH=/depot_tools:$PATH' >> $BASH_ENV
      - run: mkdir ${WEBRTCROOT} && cd ${WEBRTCROOT} && fetch --no-history --nohooks webrtc 
      - run: cd ${WEBRTCROOT} && sed -i -e "s|'src/resources'],|'src/resources'],'condition':'rtc_include_tests==true',|" src/DEPS 

      - persist_to_workspace:
          root: /
          paths:
            - depot_tools 
            - webrtc
 
  # -------------------------------------
  # build for RPI2
  # -------------------------------------
  build_rpi_armv7:
    <<: *defaults

    parameters:
      buildtype:
        type: string    
    
    environment:
      TAR_OPTIONS: --no-same-owner
      WEBRTCROOT: /webrtc 
      CROSSCOMPILER: https://sourceforge.net/projects/raspberry-pi-cross-compilers/files/Raspberry%20Pi%20GCC%20Cross-Compiler%20Toolchains/Buster/GCC%2010.2.0/Raspberry%20Pi%202%2C%203/cross-gcc-10.2.0-pi_2-3.tar.gz

    steps:
      - attach_workspace:
          at: /
      - checkout
      - run: apt-get update; DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends ca-certificates wget python python-pkg-resources autoconf automake libtool git make cmake g++ xz-utils pkg-config
      - run: 
          command: wget -qO- ${CROSSCOMPILER} | tar xz -C /opt 
          no_output_timeout: 30m
      - run: echo "export PATH=$(ls -d /opt/cross-pi-gcc-*/bin):\$PATH" >> $BASH_ENV
      - run: echo 'export PATH=/depot_tools:$PATH' >> $BASH_ENV
      - run: ${WEBRTCROOT}/src/build/linux/sysroot_scripts/install-sysroot.py --arch=arm
      - run: cd ${WEBRTCROOT} && gclient sync

      - run: cmake -DCMAKE_BUILD_TYPE=<< parameters.buildtype >> -DCMAKE_SYSTEM_PROCESSOR=armv7l -DCMAKE_SYSTEM_NAME=Linux -DCMAKE_C_COMPILER=arm-linux-gnueabihf-gcc -DCMAKE_CXX_COMPILER=arm-linux-gnueabihf-g++ -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY -DCMAKE_FIND_ROOT_PATH_MODE_PACKAGE=ONLY . && make 
      - run: cpack

      - run: mkdir /distrib && cp webrtc-streamer*.tar.gz /distrib
      - persist_to_workspace:
          root: /
          paths:
            - distrib 

  # -------------------------------------
  # store artifact in circleci
  # -------------------------------------
  store_artifact:
    <<: *defaults
    
    steps:
      - attach_workspace:
          at: /
      - store_artifacts:
          path: /distrib
          
  # -------------------------------------
  # publish artifact on github
  # -------------------------------------
  github_release:
    <<: *defaults
    
    steps:
      - attach_workspace:
          at: /
      - run: apt-get update; DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends ca-certificates golang git
      - run: go get github.com/tcnksm/ghr
      - deploy:
          name: "Deploy to Github"
          command: $HOME/go/bin/ghr -t $GITHUB_TOKEN -u $CIRCLE_PROJECT_USERNAME -r $CIRCLE_PROJECT_REPONAME $CIRCLE_TAG /distrib

workflows:
  version: 2
  build:
    jobs:
      - setup:
          filters:
            tags:
              only: /.*/                   
      - build_rpi_armv7:
          requires:
            - setup
          matrix:
            parameters:
              buildtype: ["Release", "Debug"]            
          filters:
            tags:
              only: /.*/                         
      - store_artifact:
          requires:
            - build_rpi_armv7
          filters:
            tags:
              only: /.*/                      
      - github_release:
          requires:
            - store_artifact
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/